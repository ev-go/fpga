CONSTANT	CONST_DAY =			H"08" ;
CONSTANT	CONST_MONTH =		H"10" ;
CONSTANT	CONST_CENTURY =		H"20" ;
CONSTANT	CONST_YEAR =		H"20" ;

INCLUDE			"pll_32m_x4.inc" ;
INCLUDE			"jumper.inc" ;
INCLUDE			"tx_to_opm.inc" ;
INCLUDE			"tx_to_mpu.inc" ;
INCLUDE			"tx_to_dsp.inc" ;
---INCLUDE			"jjHDLC/jjHDLC.inc" ;

INCLUDE			"calc_comm_errors.inc" ;

SUBDESIGN		main_km_170_pld_c
(
	CS_PLD
,	LBXA[9..0]
,	LB_WR
,	LB_RD

				: INPUT ;

	LBDXin[7..0]	: INPUT;
	LBDXout[7..0]	: OUTPUT;
	LBDXoutEna
				: OUTPUT ;
				
	STB_FRM
,	F16M_C
				: INPUT ;

	VOICE_B[23..0]
,	VOICE_A[23..0]

				: INPUT ;

	INT_CLS
				: OUTPUT ;
	TO_MPUC[9..1]
,	TO_OPMC[4..1]
,	DE_OPMC[4..1]
,	STB_A
,	STB_B
,	VOICE_A_O[25..24]
,	VOICE_B_O[25..24]

				: OUTPUT ;

	DSP67_DR0
,	DSP67_FSR0
,	DSP67_FSX0
,	DSP67_CLKR0
,	DSP67_CLKX0
				: OUTPUT ;
	DE_OPMR[4..1]
,	TO_OPMR[4..1]
				: OUTPUT ;

	DSP67_DR1
				: OUTPUT ;

	SPEC_TST1
,	SPEC_TST3
,	RED_C
,	GREEN_C
				: OUTPUT ;
)

VARIABLE

---	LBDX[7..0]				: TRI ;
	d_to_cpu[7..0]			: NODE ;
---	cs_comm_err				: NODE ;
---	en_test_const			: DFFE ;
---	start_test_const		: DFF ;
---	res_test_const			: DFF ;
---	reg_check_pld[1..0][7..0]	: DFFE ;
	red_led					: DFFE ;
	green_led				: DFFE ;
	opm_out_enable[1..0]	: DFFE ;
	unblock_opm_out[7..0]	: DFFE ;
	km_is_main				: NODE ;
	d_wr_from_cpu[7..0]		: DFF ;
	en_wr_316				: DFFE ;
	det_wr_316[2..0]		: DFF ;
	wr_316_cpu				: DFF ;
---	en_fix_comm_errs		: DFF ;
---	det_8k[1..0]			: DFF ;
---	en_8k					: DFF ;
---	del_to_1k[2..0]			: DFFE ;
---	en_1k					: DFF ;
---	timer_150ms[7..0]		: DFF ;
---	set_fix_on_timer		: NODE ;
---	en_int_hdlc[7..0]		: DFFE ;

	f_32m					: GLOBAL ;
	m_pll_32m_x4			: pll_32m_x4 ;
	gc128m					: NODE ;
	stb_rx					: DFF ;
	bit_cnt[11..0]			: DFF ;
	last_bit				: DFF ;
	good_frame				: DFFE ;
	res_frame				: DFFE ;
	frame_cnt[12..0]		: DFFE ;
	stb_1_sec				: DFF ;
	stb_8hz					: NODE ;
	stb_32hz				: NODE ;
	cnt_uid_cycle[4..0]		: DFFE ;
	last_cycle_uid			: DFFE ;
	res_cnt[2..0]			: DFFE ;
	i_reset					: NODE ;

	d_opm_from_a[3..0]		: NODE ;
	d_opm_from_b[3..0]		: NODE ;
	d_mpu_from_a[8..0]		: NODE ;
	d_mpu_from_b[8..0]		: NODE ;
	d_dsp_from_a			: NODE ;
	d_dsp_from_b			: NODE ;

	m_tx_to_opm				: tx_to_opm ;
	d_to_opm[3..0]			: NODE ;
---	en_h_opm				: NODE ;
---	d_rx_h_opm[3..0]		: NODE ;
---	d_tx_h_opm[3..0]		: NODE ;

	m_tx_to_mpu				: tx_to_mpu ;
	d_to_mpu[8..0]			: NODE ;
---	en_h_mpu				: NODE ;
---	en_h_pult				: NODE ;
---	d_rx_h_mpu[8]			: NODE ;
---	d_rx_h_pult[8]			: NODE ;
---	d_tx_h_mpu[8]			: NODE ;
---	d_tx_h_pult[8]			: NODE ;

	m_tx_to_dsp				: tx_to_dsp ;
	d_to_dsp				: NODE ;

---	hdlc_opm[3..0]			: jjHDLC ;
---	cs_h_opm[3..0]			: NODE ;
---	int_h_opm[3..0]			: NODE ;
---	dbo_h_opm[3..0][7..0]	: NODE ;

---	hdlc_mpu[8]				: jjHDLC ;
---	cs_h_mpu[8]				: NODE ;
---	int_h_mpu[8]			: NODE ;
---	dbo_h_mpu[8][7..0]		: NODE ;

---	hdlc_pult[8]			: jjHDLC ;
---	cs_h_pult[8]			: NODE ;
---	int_h_pult[8]			: NODE ;
---	dbo_h_pult[8][7..0]		: NODE ;

---	sum_int_h				: DFF ;
--	INT_CLS					: TRI ;

	m_calc_comm_errors		: calc_comm_errors ;
	d_comm_err[7..0]		: NODE ;



	det_rdy_err_opm[1..0]	: DFF ;
	fix_err_opm				: DFF ;
	opm_err[3..0][31..0]	: DFF ;
	opm_err_no_fix[3..0][31..0]	: DFFE ;
	en_rd_err_opm[15..0]	: DFFE ;
	en_rd_err_opm_g[15..0]	: DFF ;
	res_rd_err_opm[15..0]	: DFF ;
	res_opm_err[3..0][31..0]	: NODE ;

	det_rdy_err_mpu[1..0]	: DFF ;
	fix_err_mpu				: DFF ;
	mpu_err[1..0][8..0]		: DFF ;
	mpu_err_no_fix[1..0][8..0]	: DFFE ;
	en_rd_err_mpu[3..0]		: DFFE ;
	en_rd_err_mpu_g[3..0]	: DFF ;
	res_rd_err_mpu[3..0]	: DFF ;
	res_mpu_err[1..0][8..0]	: NODE ;

BEGIN

-- ���� CPU
	CASE ( LBXA[9..0] ) IS
		WHEN ( H"00" , B"XXXX" ) =>	d_to_cpu[7..0] = d_comm_err[7..0] ;
		WHEN ( H"01" , B"XXXX" ) =>	d_to_cpu[7..0] = d_comm_err[7..0] ;
		WHEN ( H"02" , B"XXXX" ) =>	d_to_cpu[7..0] = d_comm_err[7..0] ;

---		WHEN H"070" =>		d_to_cpu[7..0] = ( 0,0,0, spec_test_config[4..0] ) ;
---		WHEN H"071" =>		d_to_cpu[7..0] = ( 0,0,0, spec_out_bus_reg[4..0] ) ;
---		WHEN H"072" =>		d_to_cpu[7..0] = ( 0,0,0,0,0, spec_test_on_off[2..0] ) ;

-- ������ CRC
---		WHEN H"100" =>		d_to_cpu[7..0] = opm_err[0][7..0] ;
---		WHEN H"101" =>		d_to_cpu[7..0] = opm_err[0][15..8] ;
---		WHEN H"102" =>		d_to_cpu[7..0] = opm_err[0][23..16] ;
---		WHEN H"103" =>		d_to_cpu[7..0] = opm_err[0][31..24] ;
---		WHEN H"104" =>		d_to_cpu[7..0] = opm_err[1][7..0] ;
---		WHEN H"105" =>		d_to_cpu[7..0] = opm_err[1][15..8] ;
---		WHEN H"106" =>		d_to_cpu[7..0] = opm_err[1][23..16] ;
---		WHEN H"107" =>		d_to_cpu[7..0] = opm_err[1][31..24] ;
---		WHEN H"108" =>		d_to_cpu[7..0] = opm_err[2][7..0] ;
---		WHEN H"109" =>		d_to_cpu[7..0] = opm_err[2][15..8] ;
---		WHEN H"10A" =>		d_to_cpu[7..0] = opm_err[2][23..16] ;
---		WHEN H"10B" =>		d_to_cpu[7..0] = opm_err[2][31..24] ;
---		WHEN H"10C" =>		d_to_cpu[7..0] = opm_err[3][7..0] ;
---		WHEN H"10D" =>		d_to_cpu[7..0] = opm_err[3][15..8] ;
---		WHEN H"10E" =>		d_to_cpu[7..0] = opm_err[3][23..16] ;
---		WHEN H"10F" =>		d_to_cpu[7..0] = opm_err[3][31..24] ;

---		WHEN H"110" =>		d_to_cpu[7..0] = mpu_err[0][7..0] ;
---		WHEN H"111" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0,0, mpu_err[0][8] ) ;
---		WHEN H"112" =>		d_to_cpu[7..0] = mpu_err[1][7..0] ;
---		WHEN H"113" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0,0, mpu_err[1][8] ) ;

---		WHEN H"120" =>		d_to_cpu[7..0] = opm_err_no_fix[0][7..0] ;
---		WHEN H"121" =>		d_to_cpu[7..0] = opm_err_no_fix[0][15..8] ;
---		WHEN H"122" =>		d_to_cpu[7..0] = opm_err_no_fix[0][23..16] ;
---		WHEN H"123" =>		d_to_cpu[7..0] = opm_err_no_fix[0][31..24] ;
---		WHEN H"124" =>		d_to_cpu[7..0] = opm_err_no_fix[1][7..0] ;
---		WHEN H"125" =>		d_to_cpu[7..0] = opm_err_no_fix[1][15..8] ;
---		WHEN H"126" =>		d_to_cpu[7..0] = opm_err_no_fix[1][23..16] ;
---		WHEN H"127" =>		d_to_cpu[7..0] = opm_err_no_fix[1][31..24] ;
---		WHEN H"128" =>		d_to_cpu[7..0] = opm_err_no_fix[2][7..0] ;
---		WHEN H"129" =>		d_to_cpu[7..0] = opm_err_no_fix[2][15..8] ;
---		WHEN H"12A" =>		d_to_cpu[7..0] = opm_err_no_fix[2][23..16] ;
---		WHEN H"12B" =>		d_to_cpu[7..0] = opm_err_no_fix[2][31..24] ;
---		WHEN H"12C" =>		d_to_cpu[7..0] = opm_err_no_fix[3][7..0] ;
---		WHEN H"12D" =>		d_to_cpu[7..0] = opm_err_no_fix[3][15..8] ;
---		WHEN H"12E" =>		d_to_cpu[7..0] = opm_err_no_fix[3][23..16] ;
---		WHEN H"12F" =>		d_to_cpu[7..0] = opm_err_no_fix[3][31..24] ;

---		WHEN H"130" =>		d_to_cpu[7..0] = mpu_err_no_fix[0][7..0] ;
---		WHEN H"131" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0,0, mpu_err_no_fix[0][8] ) ;
---		WHEN H"132" =>		d_to_cpu[7..0] = mpu_err_no_fix[1][7..0] ;
---		WHEN H"133" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0,0, mpu_err_no_fix[1][8] ) ;
--

---		WHEN H"300" =>		d_to_cpu[7..0] = H"0A" ;
---		WHEN H"301" =>		d_to_cpu[7..0] = H"5F" ;
	
---		WHEN H"302" =>		d_to_cpu[7..0] = reg_check_pld[1][7..0] ; ---reg_check_pld[0][7..0] ;  05.10.2020 - perecrest
---		WHEN H"303" =>		d_to_cpu[7..0] = reg_check_pld[0][7..0] ;---reg_check_pld[1][7..0] ;
		
---		WHEN H"304" =>		d_to_cpu[7..0] = CONST_DAY ;
---		WHEN H"305" =>		d_to_cpu[7..0] = CONST_MONTH ;
---		WHEN H"306" =>		d_to_cpu[7..0] = CONST_CENTURY ;
---		WHEN H"307" =>		d_to_cpu[7..0] = CONST_YEAR ;

---		WHEN H"308" =>		d_to_cpu[7..0] = GND ;

---		WHEN H"30A" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0,0, red_led ) ;
---		WHEN H"30B" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0,0, green_led ) ;

---		WHEN H"316" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0,0, en_fix_comm_errs ) ;

---		WHEN H"31E" =>		d_to_cpu[7..0] = ( 0,0,0,0,0,0, opm_out_enable[1..0] ) ;
		WHEN H"31F" =>		d_to_cpu[7..0] = unblock_opm_out[7..0] ;

---		WHEN H"340" =>		d_to_cpu[7..0] = ( int_h_mpu[8] , int_h_pult[8] ,0,0, int_h_opm[3..0] ) ;
---		WHEN H"341" =>		d_to_cpu[7..0] = en_int_hdlc[7..0] ;

---		WHEN ( H"35" , B"XXXX" ) =>		d_to_cpu[7..0] = dbo_h_mpu[8][7..0] ;
---		WHEN ( H"36" , B"XXXX" ) =>		d_to_cpu[7..0] = dbo_h_pult[8][7..0] ;
---		WHEN ( H"37" , B"XXXX" ) =>		d_to_cpu[7..0] = dbo_h_opm[0][7..0] ;
---		WHEN ( H"38" , B"XXXX" ) =>		d_to_cpu[7..0] = dbo_h_opm[1][7..0] ;
---		WHEN ( H"39" , B"XXXX" ) =>		d_to_cpu[7..0] = dbo_h_opm[2][7..0] ;
---		WHEN ( H"3A" , B"XXXX" ) =>		d_to_cpu[7..0] = dbo_h_opm[3][7..0] ;

		WHEN OTHERS =>		d_to_cpu[7..0] = GND ;
	END CASE ;


	LBDXout[7..0] = d_to_cpu[7..0] & LBDXoutEna ;
	LBDXoutEna	= ( !CS_PLD & !LB_RD );
	
---	cs_comm_err = ( !CS_PLD & (LBXA[9..4] <= 2) ) ;


-- ����������� �������� ����
---	reg_check_pld[1..0][7..0].clk = LB_WR ;
---	reg_check_pld[0][7..0].ena = ( !CS_PLD & (LBXA[9..0] == H"302") ) ;
---	reg_check_pld[1][7..0].ena = ( !CS_PLD & (LBXA[9..0] == H"303") ) ;
---	reg_check_pld[0][7..0] = LBDX[7..0] ;
---	reg_check_pld[1][7..0] = LBDX[7..0] ;

---	red_led.clk = LB_WR ;
---	red_led.ena = ( !CS_PLD & (LBXA[9..0] == H"30A") ) ;
---	red_led = LBDX[0] ;

---	green_led.clk = LB_WR ;
---	green_led.ena = ( !CS_PLD & (LBXA[9..0] == H"30B") ) ;
---	green_led = LBDX[0] ;

---	RED_C = red_led ;
---	GREEN_C = green_led ;

-- ���������� �������� ������ ����������
---	d_wr_from_cpu[7..0].clk = LB_WR ;
---	d_wr_from_cpu[7..0] = LBDX[7..0] ;

---	en_wr_316.clk = LB_WR ;
---	en_wr_316.ena = ( !CS_PLD & (LBXA[9..0] == H"316") ) ;
---	en_wr_316 = VCC ;
---	en_wr_316.clrn = !wr_316_cpu ;

---	det_wr_316[2..0].clk = gc128m ;
---	det_wr_316[0] = en_wr_316 ;
---	det_wr_316[2..1] = det_wr_316[1..0] ;

---	wr_316_cpu.clk = gc128m ;
---	wr_316_cpu = ( !det_wr_316[2] & det_wr_316[1] ) ;

---	en_fix_comm_errs.clk = gc128m ;
---	IF ( set_fix_on_timer ) THEN
---		en_fix_comm_errs = VCC ;
---	ELSIF ( wr_316_cpu ) THEN
---		en_fix_comm_errs = d_wr_from_cpu[0] ;
---	ELSE
---		en_fix_comm_errs = en_fix_comm_errs ;
---	END IF ;
---	en_fix_comm_errs.prn = !i_reset ;

-- ������ 150 ��
---	det_8k[1..0].clk = gc128m ; 
---	det_8k[1..0] = ( det_8k[0] , last_bit ) ;

---	en_8k.clk = gc128m ;
---	en_8k = ( !det_8k[1] & det_8k[0] ) ;

---	del_to_1k[2..0].clk = gc128m ;
---	del_to_1k[2..0].ena = en_8k ;
---	del_to_1k[2..0] = ( del_to_1k[2..0] + 1 ) ;

---	en_1k.clk = gc128m ;
---	en_1k = ( (del_to_1k[2..0] == 0) & en_8k ) ;

---	timer_150ms[7..0].clk = gc128m ;
---	IF ( en_fix_comm_errs ) THEN
---		timer_150ms[7..0] = 0 ;
---	ELSIF ( en_1k ) THEN
---		timer_150ms[7..0] = ( (timer_150ms[7..0] + 1) & (timer_150ms[7..0] < 149) ) ;
---	ELSE
---		timer_150ms[7..0] = timer_150ms[7..0] ;
---	END IF ;

---	set_fix_on_timer = ( (timer_150ms[7..0] == 149) & en_1k ) ;

	STB_A = GND ;
	STB_B = GND ;

-- ���������� ������� OPM
	opm_out_enable[1..0].clk = LB_WR ;
---	opm_out_enable[1..0].ena = ( !CS_PLD_C & (LBXA[9..0] == H"31E") ) ;
---	opm_out_enable[1..0] = LBDX[1..0] ;
opm_out_enable[1..0] = vcc ;

	unblock_opm_out[7..0].clk = LB_WR ;
	unblock_opm_out[7..0].ena = ( !CS_PLD & (LBXA[9..0] == H"31F") ) ;
	unblock_opm_out[7..0] = LBDXin[7..0] ;

	km_is_main = ( unblock_opm_out[7..0] != 0 ) ;

-- ������� �� ������ �������� �������������������
---	en_test_const.clk = LB_WR ;
---	en_test_const.ena = ( !CS_PLD_C & (LBXA[9..0] == H"328") ) ;
---	en_test_const = LBDX[0] ;
---	en_test_const.clrn = !res_test_const ;

---	start_test_const.clk = f_32m ;
---	start_test_const = ( en_test_const & !start_test_const ) ;

---	res_test_const.clk = f_32m ;
---	res_test_const = start_test_const ;

	VOICE_A_O[25] = gnd;---start_test_const ;
	VOICE_B_O[25] = gnd;---start_test_const ;

-- HDLC
---	en_int_hdlc[7..0].clk = LB_WR ;
---	en_int_hdlc[7..0].ena = ( !CS_PLD_C & (LBXA[9..0] == H"341") ) ;
---	en_int_hdlc[7..0] = LBDX[7..0] ;
---	en_int_hdlc[7..0].clrn = !i_reset ;

---	cs_h_mpu[8] = ( !CS_PLD_C & (LBXA[9..4] == H"35") ) ;
---	cs_h_pult[8] = ( !CS_PLD_C & (LBXA[9..4] == H"36") ) ;
---	FOR i IN 0 TO 3 GENERATE
---		cs_h_opm[i] = ( !CS_PLD_C & (LBXA[9..4] == (H"37" + i)) ) ;
---	END GENERATE ;

-- ������ CRC
--���
	det_rdy_err_opm[1..0].clk = gc128m ;
	det_rdy_err_opm[0] = m_tx_to_opm.err_fl_rdy ;
	det_rdy_err_opm[1] = det_rdy_err_opm[0] ;

	fix_err_opm.clk = gc128m ;
	fix_err_opm = ( !det_rdy_err_opm[0] & det_rdy_err_opm[1] ) ;

	FOR i IN 0 TO 3 GENERATE
		FOR j in 0 TO 31 GENERATE
			opm_err[i][j].clk = gc128m ;
			opm_err[i][j] = ( (opm_err[i][j] & !res_opm_err[i][j]) # (m_tx_to_opm.crc_err[i] & (m_tx_to_opm.num_ki_err[4..0] == j) & fix_err_opm) ) ;

			opm_err_no_fix[i][j].clk = gc128m ;
			opm_err_no_fix[i][j].ena = ( (m_tx_to_opm.num_ki_err[4..0] == j) & fix_err_opm ) ;
			opm_err_no_fix[i][j] = m_tx_to_opm.crc_err[i] ;
		END GENERATE ;
	END GENERATE ;

	FOR i IN 0 TO 15 GENERATE
		en_rd_err_opm[i].clk = LB_RD ;
		en_rd_err_opm[i].ena = ( !CS_PLD & (LBXA[9..0] == (H"100" + i)) ) ;
		en_rd_err_opm[i] = VCC ;
		en_rd_err_opm[i].clrn = !res_rd_err_opm[i] ;

		en_rd_err_opm_g[i].clk = gc128m ;
		en_rd_err_opm_g[i] = ( en_rd_err_opm[i] & !en_rd_err_opm_g[i] ) ;

		res_rd_err_opm[i].clk = gc128m ;
		res_rd_err_opm[i] = en_rd_err_opm_g[i] ;
	END GENERATE ;

	FOR i IN 0 TO 3 GENERATE
		FOR j IN 0 TO 3 GENERATE
			res_opm_err[i][(j*8+7)..j*8] = en_rd_err_opm_g[i*4 + j] ;
		END GENERATE ;
	END GENERATE ;

--���
	det_rdy_err_mpu[1..0].clk = gc128m ;
	det_rdy_err_mpu[0] = m_tx_to_mpu.err_fl_rdy ;
	det_rdy_err_mpu[1] = det_rdy_err_mpu[0] ;

	fix_err_mpu.clk = gc128m ;
	fix_err_mpu = ( !det_rdy_err_mpu[0] & det_rdy_err_mpu[1] ) ;

	FOR i IN 0 TO 1 GENERATE
		FOR j in 0 TO 8 GENERATE
			mpu_err[i][j].clk = gc128m ;
			mpu_err[i][j] = ( (mpu_err[i][j] & !res_mpu_err[i][j]) # (m_tx_to_mpu.crc_err[j] & (m_tx_to_mpu.num_ki_err == i) & fix_err_mpu) ) ;

			mpu_err_no_fix[i][j].clk = gc128m ;
			mpu_err_no_fix[i][j].ena = ( (m_tx_to_mpu.num_ki_err == i) & fix_err_mpu ) ;
			mpu_err_no_fix[i][j] = m_tx_to_mpu.crc_err[j] ;
		END GENERATE ;
	END GENERATE ;

	FOR i IN 0 TO 3 GENERATE
		en_rd_err_mpu[i].clk = LB_RD ;
		en_rd_err_mpu[i].ena = ( !CS_PLD & (LBXA[9..0] == (H"110" + i)) ) ;
		en_rd_err_mpu[i] = VCC ;
		en_rd_err_mpu[i].clrn = !res_rd_err_mpu[i] ;

		en_rd_err_mpu_g[i].clk = gc128m ;
		en_rd_err_mpu_g[i] = ( en_rd_err_mpu[i] & !en_rd_err_mpu_g[i] ) ;

		res_rd_err_mpu[i].clk = gc128m ;
		res_rd_err_mpu[i] = en_rd_err_mpu_g[i] ;
	END GENERATE ;

	res_mpu_err[0][7..0] = en_rd_err_mpu_g[0] ;
	res_mpu_err[0][8] = en_rd_err_mpu_g[1] ;
	res_mpu_err[1][7..0] = en_rd_err_mpu_g[2] ;
	res_mpu_err[1][8] = en_rd_err_mpu_g[3] ;

-- �������� �������
	f_32m = F16M_C ;

	m_pll_32m_x4.inclk0 = F16M_C ;
	gc128m = m_pll_32m_x4.c0 ;

-- ������� �����
	stb_rx.clk = f_32m ;
	stb_rx = STB_FRM ;

	bit_cnt[11..0].clk = f_32m ;
	IF ( stb_rx ) THEN
		bit_cnt[11..0] = 1 ;
	ELSE
		bit_cnt[11..0] = ( bit_cnt[11..0] + 1 ) ;
	END IF ;

	last_bit.clk = f_32m ;
	last_bit = ( bit_cnt[11..0] == -2 ) ;

	good_frame.clk = f_32m ;
	good_frame.ena = stb_rx ;
	good_frame = ( bit_cnt[11..0] == 0 ) ;

	res_frame.clk = f_32m ;
	res_frame.ena = ( bit_cnt[11..0] == 0 ) ;
	res_frame = ( good_frame & !stb_rx ) ;

	frame_cnt[12..0].clk = f_32m ;
	frame_cnt[12..0].ena = last_bit ;
	IF ( res_frame ) THEN
		frame_cnt[12..0] = 1 ;
	ELSE
		frame_cnt[12..0] = ( frame_cnt[12..0] + 1 ) ;
	END IF ;

	stb_1_sec.clk = f_32m ;
	stb_1_sec = ( (frame_cnt[12..0] == -1) & (bit_cnt[11..0] == -1) ) ;

	stb_8hz  = jumper( .clk = f_32m , .inp = frame_cnt[9] ) RETURNS ( .ret ) ;
	stb_32hz = jumper( .clk = f_32m , .inp = frame_cnt[7] ) RETURNS ( .ret ) ;

-- ������� ����� ���
	cnt_uid_cycle[4..0].clk = f_32m ;
	cnt_uid_cycle[4..0].ena = last_bit ;
	IF ( last_cycle_uid ) THEN
		cnt_uid_cycle[4..0] = 0 ;
	ELSE
		cnt_uid_cycle[4..0] = ( cnt_uid_cycle[4..0] + 1 ) ;
	END IF ;

	last_cycle_uid.clk = f_32m ;
	last_cycle_uid.ena = last_bit ;
	last_cycle_uid = ( cnt_uid_cycle[4..0] == 19 ) ;

	VOICE_A_O[24] = last_cycle_uid ;
	VOICE_B_O[24] = last_cycle_uid ;

-- Internal Reset
	res_cnt[2..0].clk = f_32m ;
	res_cnt[2..0].ena = stb_8hz ;
	res_cnt[2..0] = ( (res_cnt[2..0] + 1) # (res_cnt[2..0] == VCC) ) ;
	
	i_reset = !res_cnt[2] ;

-- ������ � ���� A, B
	d_opm_from_a[3..0] = VOICE_A[3..0] ;
	d_opm_from_b[3..0] = VOICE_B[3..0] ;

	d_mpu_from_a[8..0] = VOICE_A[12..4] ;
	d_mpu_from_b[8..0] = VOICE_B[12..4] ;

	d_dsp_from_a = VOICE_A[13] ;
	d_dsp_from_b = VOICE_B[13] ;

-- �������� �� OPM
	m_tx_to_opm.d_from_a[3..0] = d_opm_from_a[3..0] ;
	m_tx_to_opm.d_from_b[3..0] = d_opm_from_b[3..0] ;
	m_tx_to_opm.d_tx_h_opm[3..0] = vcc;---d_tx_h_opm[3..0] ;
	m_tx_to_opm.bit_cnt[11..0] = bit_cnt[11..0] ;
	m_tx_to_opm.f_32m = f_32m ;

	d_to_opm[3..0] = m_tx_to_opm.d_to_opm[3..0] ;
---	en_h_opm = m_tx_to_opm.en_h_opm ;
---	d_rx_h_opm[3..0] = m_tx_to_opm.d_rx_h_opm[3..0] ;

	DE_OPMC[4..1] = unblock_opm_out[3..0] ;
	DE_OPMR[4..1] = unblock_opm_out[7..4] ;

TO_OPMC[4..1] 	=  d_to_opm[3..0]	# 	!unblock_opm_out[3..0]  ; ---high level, if block ; real data? if unblock
TO_OPMR[4..1] 	=  d_to_opm[3..0]	# 	!unblock_opm_out[7..4]  ;	

-- �������� �� MPU
	m_tx_to_mpu.d_from_a[8..0] = d_mpu_from_a[8..0] ;
	m_tx_to_mpu.d_from_b[8..0] = d_mpu_from_b[8..0] ;
	m_tx_to_mpu.d_tx_h_mpu[8] = vcc;---d_tx_h_mpu[8] ;
	m_tx_to_mpu.d_tx_h_pult[8] = vcc;---d_tx_h_pult[8] ;
	m_tx_to_mpu.km_is_main = km_is_main ;
	m_tx_to_mpu.bit_cnt[11..0] = bit_cnt[11..0] ;
	m_tx_to_mpu.f_32m = f_32m ;

	d_to_mpu[8..0] = m_tx_to_mpu.d_to_mpu[8..0] ;
---	en_h_mpu = m_tx_to_mpu.en_h_mpu ;
---	en_h_pult = m_tx_to_mpu.en_h_pult ;
---	d_rx_h_mpu[8] = m_tx_to_mpu.d_rx_h_mpu[8] ;
---	d_rx_h_pult[8] = m_tx_to_mpu.d_rx_h_pult[8] ;

	TO_MPUC[9..1] = d_to_mpu[8..0] ;

-- �������� �� DSP
	m_tx_to_dsp.d_from_a = d_dsp_from_a ;
	m_tx_to_dsp.d_from_b = d_dsp_from_b ;
	m_tx_to_dsp.bit_cnt[11..0] = bit_cnt[11..0] ;
	m_tx_to_dsp.f_32m = f_32m ;

	d_to_dsp = m_tx_to_dsp.d_to_dsp ;

	DSP67_DR0 = d_to_dsp ;
	DSP67_DR1 = VCC ;

	DSP67_FSR0 = last_bit ;
	DSP67_FSX0 = last_bit ;
	DSP67_CLKR0 = f_32m ;
	DSP67_CLKX0 = f_32m ;


--	INT_CLS.oe = sum_int_h ;

-- SPEC_TEST
	---SPEC_TST1 = m_spec_test.SpecFrameSync;
	---SPEC_TST3 = m_spec_test.SpecReference;
	SPEC_TST1 = vcc;
	SPEC_TST3 = vcc;

-- ������ ����������
	m_calc_comm_errors.cpu_a[5..0] = LBXA[5..0] ;
	m_calc_comm_errors.cpu_wr = LB_WR ;
	
	m_calc_comm_errors.err_cs = vcc;---cs_comm_err ;
	
	m_calc_comm_errors.opm_err_flags[3..0] = m_tx_to_opm.err_flags[3..0] ;
	m_calc_comm_errors.opm_num_ki[4..0] = m_tx_to_opm.num_ki_err[4..0] ;
	m_calc_comm_errors.opm_rdy = m_tx_to_opm.err_fl_rdy ;
	m_calc_comm_errors.mpu_err_flags[8..0] = m_tx_to_mpu.err_flags[8..0] ;
	m_calc_comm_errors.mpu_num_ki = m_tx_to_mpu.num_ki_err ;
	m_calc_comm_errors.mpu_rdy = m_tx_to_mpu.err_fl_rdy ;
	m_calc_comm_errors.dsp_err_flag = m_tx_to_dsp.err_flag ;
	m_calc_comm_errors.dsp_num_ki[6..0] = m_tx_to_dsp.num_ki_err[6..0] ;
	m_calc_comm_errors.dsp_rdy = m_tx_to_dsp.err_fl_rdy ;
	
	m_calc_comm_errors.en_fix_errs = vcc;---en_fix_comm_errs ;
	
	m_calc_comm_errors.gclk = gc128m ;

	d_comm_err[7..0] = m_calc_comm_errors.cpu_d_err_o[7..0] ;

END ;