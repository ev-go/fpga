SUBDESIGN		tx_to_opm
(
	d_from_a[3..0]
,	d_from_b[3..0]
,	d_tx_h_opm[3..0]
,	bit_cnt[11..0]
,	f_32m
				: INPUT ;

	d_to_opm[3..0]
,	err_flags[3..0]
,	num_ki_err[4..0]
,	err_fl_rdy
,	en_h_opm
,	d_rx_h_opm[3..0]

,	crc_err[3..0]
				: OUTPUT ;
)

VARIABLE

	cnt_tx[11..0]				: NODE ;
	en_cnt_o					: DFF ;
	en_sh_o						: DFF ;
	en_d_opm_o					: NODE ;
	en_inv_d_opm				: NODE ;
	cnt_bit_o[4..0]				: DFFE ;
	cnt_slot_o[5..0]			: DFFE ;
	shift_rx_a[3..0][24..0]		: DFFE ;
	shift_rx_b[3..0][24..0]		: DFFE ;
	data_compared[3..0][24..0]	: NODE ;
	sync_word[7..0]				: NODE ;
	shift_opm_o[3..0][24..0]	: DFFE ;
	d_to_opm[3..0]				: DFFE ;
	en_err_fl					: NODE ;
	err_d[3..0]					: NODE ;
	err_flags[3..0]				: DFFE ;
	num_ki_err[4..0]			: DFFE ;
	err_fl_rdy					: DFF ;
	en_hdlc						: DFFE ;

	voice_d[3..0][15..0]		: NODE ;
	crc_d[3..0][7..0]			: NODE ;
	crc_calc[3..0][7..0]		: NODE ;
	crc_err[3..0]				: DFFE ;

BEGIN

-- ��������
	cnt_tx[11..0] = ( bit_cnt[11..0] + 2 ) ;

	en_cnt_o.clk = f_32m ;
	en_sh_o.clk = f_32m ;
	en_cnt_o = ( cnt_tx[1..0] == -2 ) ;
	en_sh_o = ( cnt_tx[1..0] == -1 ) ;

	en_d_opm_o = cnt_tx[0] ;

	en_inv_d_opm = !cnt_tx[1] ;

	cnt_bit_o[4..0].clk = f_32m ;
	cnt_slot_o[5..0].clk = f_32m ;
	cnt_bit_o[4..0].ena = en_cnt_o ;
	cnt_slot_o[5..0].ena = en_cnt_o ;
	IF ( cnt_tx[11..2] == -1 ) THEN
		cnt_bit_o[4..0] = 0 ;
		cnt_slot_o[3..0] = 0 ;
	ELSIF ( cnt_bit_o[4..0] >= 29 ) THEN
		cnt_bit_o[4..0] = 0 ;
		cnt_slot_o[5..0] = ( cnt_slot_o[5..0] + 1 ) ;
	ELSE
		cnt_bit_o[4..0] = ( cnt_bit_o[4..0] + 1 ) ;
		cnt_slot_o[5..0] = cnt_slot_o[5..0] ;
	END IF ;

-- ����� �� ����
	FOR i IN 0 TO 3 GENERATE
		shift_rx_a[i][24..0].clk = f_32m ;
		shift_rx_b[i][24..0].clk = f_32m ;
		shift_rx_a[i][24..0].ena = en_cnt_o ;
		shift_rx_b[i][24..0].ena = en_cnt_o ;
		shift_rx_a[i][24..0] = ( shift_rx_a[i][23..0] , d_from_a[i] ) ;
		shift_rx_b[i][24..0] = ( shift_rx_b[i][23..0] , d_from_b[i] ) ;

		IF ( shift_rx_a[i][24..0] == shift_rx_b[i][24..0] ) THEN
			data_compared[i][24..0] = shift_rx_a[i][24..0] ;
			err_d[i] = GND ;
		ELSE
	---		data_compared[i][24..0] = VCC ;
			data_compared[i][24..9] = H"FFFF" ;
			data_compared[i][8..1] = H"DB" ;
			data_compared[i][0] = VCC ;
			
			err_d[i] = VCC ;
		END IF ;
	END GENERATE ;

-- ������ �� ���� OPM
	sync_word[7..0] = B"11011001" ;

	FOR i IN 0 TO 3 GENERATE
		shift_opm_o[i][24..0].clk = f_32m ;
		shift_opm_o[i][24..0].ena = en_sh_o ;
		IF ( cnt_tx[11..2] == -8 ) THEN
			shift_opm_o[i][24..17] = sync_word[7..0] ;
			shift_opm_o[i][16..0] = VCC ;
		ELSIF ( (cnt_bit_o[4..0] == 0) & (cnt_slot_o[5..0] <= 31) ) THEN
			shift_opm_o[i][24..0] = data_compared[i][24..0] ;
		ELSIF ( en_hdlc ) THEN
			shift_opm_o[i][24] = d_tx_h_opm[i] ;
			shift_opm_o[i][23..0] = VCC ;
		ELSE
			shift_opm_o[i][24..0] = ( shift_opm_o[i][23..0] , 1 ) ;
		END IF ;

		d_to_opm[i].clk = f_32m ;
		d_to_opm[i].ena = en_d_opm_o ;
		IF ( en_inv_d_opm ) THEN
			d_to_opm[i] = !shift_opm_o[i][24] ;
		ELSE
			d_to_opm[i] = shift_opm_o[i][24] ;
		END IF ;
	END GENERATE ;

-- ����� ������ ���������
	en_err_fl = ( en_sh_o & (cnt_bit_o[4..0] == 0) & (cnt_slot_o[5..0] <= 31) ) ;

	err_flags[3..0].clk = f_32m ;
	err_flags[3..0].ena = en_err_fl ;
	err_flags[3..0] = err_d[3..0] ;

	num_ki_err[4..0].clk = f_32m ;
	num_ki_err[4..0].ena = en_err_fl ;
	num_ki_err[4..0] = cnt_slot_o[4..0] ;

	err_fl_rdy.clk = f_32m ;
	err_fl_rdy = en_err_fl ;

-- 	������ CRC
	FOR i IN 0 TO 3 GENERATE
		voice_d[i][15..0] = data_compared[i][24..9] ;
		crc_d[i][7..0] = data_compared[i][8..1] ;

		crc_calc[i][0] = !( voice_d[i][14] XOR voice_d[i][12] XOR voice_d[i][8]  XOR voice_d[i][7]  XOR voice_d[i][6] XOR voice_d[i][0] ) ;
		crc_calc[i][1] = !( voice_d[i][15] XOR voice_d[i][14] XOR voice_d[i][13] XOR voice_d[i][12] XOR voice_d[i][9] XOR voice_d[i][6] XOR voice_d[i][1] XOR voice_d[i][0] ) ;
		crc_calc[i][2] = !( voice_d[i][15] XOR voice_d[i][13] XOR voice_d[i][12] XOR voice_d[i][10] XOR voice_d[i][8] XOR voice_d[i][6] XOR voice_d[i][2] XOR voice_d[i][1] XOR voice_d[i][0] ) ;
		crc_calc[i][3] = !( voice_d[i][14] XOR voice_d[i][13] XOR voice_d[i][11] XOR voice_d[i][9]  XOR voice_d[i][7] XOR voice_d[i][3] XOR voice_d[i][2] XOR voice_d[i][1] ) ;
		crc_calc[i][4] = !( voice_d[i][15] XOR voice_d[i][14] XOR voice_d[i][12] XOR voice_d[i][10] XOR voice_d[i][8] XOR voice_d[i][4] XOR voice_d[i][3] XOR voice_d[i][2] ) ;
		crc_calc[i][5] = !( voice_d[i][15] XOR voice_d[i][13] XOR voice_d[i][11] XOR voice_d[i][9]  XOR voice_d[i][5] XOR voice_d[i][4] XOR voice_d[i][3] ) ;
		crc_calc[i][6] = !( voice_d[i][14] XOR voice_d[i][12] XOR voice_d[i][10] XOR voice_d[i][6]  XOR voice_d[i][5] XOR voice_d[i][4] ) ;
		crc_calc[i][7] = !( voice_d[i][15] XOR voice_d[i][13] XOR voice_d[i][11] XOR voice_d[i][7]  XOR voice_d[i][6] XOR voice_d[i][5] ) ;

		crc_err[i].clk = f_32m ;
		crc_err[i].ena = en_err_fl ;
		crc_err[i] = ( crc_d[i][7..0] != crc_calc[i][7..0] ) ;
	END GENERATE ;

-- HDLC
	en_hdlc.clk = f_32m ;
	en_hdlc.ena = en_sh_o ;
	en_hdlc = ( (cnt_bit_o[4..0] >= 24) & (cnt_bit_o[4..0] <= 28) & (cnt_slot_o[5..0] <= 31) ) ;

	en_h_opm = ( en_hdlc & en_sh_o ) ;

	d_rx_h_opm[3..0] = shift_rx_a[3..0][24] ;

END ;